import os
from langchain.docstore.document import Document
from langchain_community.vectorstores import Chroma
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_core.runnables import Runnable
from src.common import config
from src.common.utils import measure_time
from src.rag import utils
from src.rag.retriever import create_ensemble_retriever
from src.rag.chain import create_rag_chain
from src.common.logger import log
import time


class JiraRAGExecutor:
    """
    A class to encapsulate the RAG chain for querying Jira reviews.

    This class handles the one-time initialization of models, vector stores,
    and retrievers to be used throughout the application's lifecycle.
    """

    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(JiraRAGExecutor, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        """
        Initializes the RAG components. This is done only once.
        """
        if hasattr(self, "rag_chain"):
            return

        log.info("Initializing JiraRAGExecutor for the first time...")

        log.info("Loading embedding model...")

        with measure_time("embedding model loading", log):
            embeddings = HuggingFaceEmbeddings(
                model_name=config.EMBEDDING_MODEL_NAME,
                model_kwargs=config.MODEL_KWARGS,
                encode_kwargs=config.ENCODE_KWARGS,
            )

        log.info(f"Loading vector store from {config.DB_PERSIST_DIRECTORY}...")
        if not os.path.exists(config.DB_PERSIST_DIRECTORY):
            raise FileNotFoundError(
                f"Chroma DB directory not found at '{config.DB_PERSIST_DIRECTORY}'. "
                "Please run the ingestion script first (scripts/ingest_data.py)."
            )
        with measure_time("vector db instance", log):
            vectorstore = Chroma(
                persist_directory=config.DB_PERSIST_DIRECTORY,
                embedding_function=embeddings,
            )

        log.info("Loading original documents for BM25 retriever...")
        reviews = utils.load_json_from_file(config.REVIEW_DATA_PATH)
        documents = [
            Document(
                page_content=review.get("review_detail", ""),
                metadata={
                    "author": review.get("author", "Unknown"),
                    "review_date": review.get("review_date", "Unknown"),
                    "rating": review.get("rating", 0),
                },
            )
            for review in reviews
        ]
        log.info("Creating the ensemble retriever and RAG chain...")
        with measure_time("Hybrid retriever", log):
            self.ensemble_retriever = create_ensemble_retriever(
                vectorstore,
                documents,
                config.ENSEMBLE_RETRIEVER_WEIGHTS,
            )
        log.info("JiraRAGExecutor is ready...")

    def get_rag_response(self, query: str) -> str:
        """
        Executes the RAG chain for a given user query.

        This is the main entry point for an agent to get an answer from the
        Jira reviews knowledge base.

        Args:
            query: The user's question.

        Returns:
            The answer generated by the RAG chain.
        """
        if not query:
            return "Please provide a valid question."

        log.info(f"Invoking RAG chain with query: '{query}'")
        rag_chain: Runnable = create_rag_chain(self.ensemble_retriever)
        response = rag_chain.invoke({"input": query})
        return (
            response
            if response and isinstance(response, str)
            else "Sorry I am unable to answer from Jira Knowledge base"
        )


jira_rag_agent = JiraRAGExecutor()
